// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	database "app/database"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Writer is an autogenerated mock type for the Writer type
type Writer struct {
	mock.Mock
}

// InsertOrUpdateDecision provides a mock function with given fields: ctx, entry
func (_m *Writer) InsertOrUpdateDecision(ctx context.Context, entry database.PutDecisionEntry) error {
	ret := _m.Called(ctx, entry)

	if len(ret) == 0 {
		panic("no return value specified for InsertOrUpdateDecision")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.PutDecisionEntry) error); ok {
		r0 = rf(ctx, entry)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateLikesAsViewed provides a mock function with given fields: ctx, RecipientId, likes
func (_m *Writer) UpdateLikesAsViewed(ctx context.Context, RecipientId string, likes []database.DecisionModel) error {
	ret := _m.Called(ctx, RecipientId, likes)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLikesAsViewed")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []database.DecisionModel) error); ok {
		r0 = rf(ctx, RecipientId, likes)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUserTotalLikes provides a mock function with given fields: ctx, RecipientId
func (_m *Writer) UpdateUserTotalLikes(ctx context.Context, RecipientId string) error {
	ret := _m.Called(ctx, RecipientId)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserTotalLikes")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, RecipientId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewWriter creates a new instance of Writer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWriter(t interface {
	mock.TestingT
	Cleanup(func())
}) *Writer {
	mock := &Writer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
