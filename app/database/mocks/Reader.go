// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	database "app/database"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Reader is an autogenerated mock type for the Reader type
type Reader struct {
	mock.Mock
}

// FindLikesByRecipientIdPaginated provides a mock function with given fields: ctx, recipientId, page
func (_m *Reader) FindLikesByRecipientIdPaginated(ctx context.Context, recipientId string, page int) ([]database.DecisionModel, error) {
	ret := _m.Called(ctx, recipientId, page)

	if len(ret) == 0 {
		panic("no return value specified for FindLikesByRecipientIdPaginated")
	}

	var r0 []database.DecisionModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int) ([]database.DecisionModel, error)); ok {
		return rf(ctx, recipientId, page)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int) []database.DecisionModel); ok {
		r0 = rf(ctx, recipientId, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.DecisionModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int) error); ok {
		r1 = rf(ctx, recipientId, page)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindNewLikesByRecipientIdPaginated provides a mock function with given fields: ctx, recipientId, page
func (_m *Reader) FindNewLikesByRecipientIdPaginated(ctx context.Context, recipientId string, page int) ([]database.DecisionModel, error) {
	ret := _m.Called(ctx, recipientId, page)

	if len(ret) == 0 {
		panic("no return value specified for FindNewLikesByRecipientIdPaginated")
	}

	var r0 []database.DecisionModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int) ([]database.DecisionModel, error)); ok {
		return rf(ctx, recipientId, page)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int) []database.DecisionModel); ok {
		r0 = rf(ctx, recipientId, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.DecisionModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int) error); ok {
		r1 = rf(ctx, recipientId, page)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIsMatch provides a mock function with given fields: ctx, ActorId, RecipientId
func (_m *Reader) GetIsMatch(ctx context.Context, ActorId string, RecipientId string) (bool, error) {
	ret := _m.Called(ctx, ActorId, RecipientId)

	if len(ret) == 0 {
		panic("no return value specified for GetIsMatch")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return rf(ctx, ActorId, RecipientId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, ActorId, RecipientId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, ActorId, RecipientId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLimit provides a mock function with given fields:
func (_m *Reader) GetLimit() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLimit")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetUserById provides a mock function with given fields: ctx, userId
func (_m *Reader) GetUserById(ctx context.Context, userId string) (database.UserModel, error) {
	ret := _m.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetUserById")
	}

	var r0 database.UserModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (database.UserModel, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) database.UserModel); ok {
		r0 = rf(ctx, userId)
	} else {
		r0 = ret.Get(0).(database.UserModel)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewReader creates a new instance of Reader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReader(t interface {
	mock.TestingT
	Cleanup(func())
}) *Reader {
	mock := &Reader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
